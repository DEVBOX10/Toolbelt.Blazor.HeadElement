@namespace Toolbelt.Blazor.HeadElement
@inject Toolbelt.Blazor.HeadElement.IHeadElementHelper HeadElementHelper

@code {
    [Parameter]
    public string Name { get; set; } = "";

    [Parameter]
    public string Property { get; set; } = "";

    [Parameter]
    public string HttpEquiv { get; set; } = "";

    [Parameter]
    public string Content { get; set; } = "";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var httpEquiv = !string.IsNullOrEmpty(this.HttpEquiv) ?
            this.HttpEquiv :
            this.InputAttributes != null && this.InputAttributes.TryGetValue("http-equiv", out var v) && v is string ? v as string : "";
        await HeadElementHelper.SetMetaElementsAsync(new MetaElement
        {
            Name = this.Name,
            Property = this.Property,
            HttpEquiv = httpEquiv,
            Content = Content
        });
    }
}