@using System.Text
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.RenderTree

@namespace Toolbelt.Blazor.HeadElement
@inject Toolbelt.Blazor.HeadElement.IHeadElementHelper HeadElementHelper
@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var renderTreeBuilder = new RenderTreeBuilder();
        this.ChildContent?.Invoke(renderTreeBuilder);

        var frames = renderTreeBuilder.GetFrames();
        var title = new StringBuilder();
        for (var i = 0; i < frames.Count; i++)
        {
            var frame = frames.Array[i];
            switch (frame.FrameType)
            {
                case RenderTreeFrameType.Text:
                    title.Append(frame.TextContent);
                    break;
                case RenderTreeFrameType.Markup:
                    title.Append(frame.MarkupContent);
                    break;
                default:
                    break;
            }
        }

        await HeadElementHelper.SetTitleAsync(title.ToString());
    }
}