@page "/fetchdata"
@inject IWeatherForecastService WeatherForecastService
@inject Toolbelt.Blazor.HeadElement.IHeadElementHelper HeadElementHelper
@**@

<Meta name="meta-N1" Content="value-N1-C" />
<Meta Name="meta-N4" content="value-N4-C" />
<Meta property="meta-P1" Content="value-P1-C" />
<Meta Property="meta-P4" Content="value-P4-C" />
<Meta HttpEquiv="meta-H1" Content="value-H1-C" />
<Meta http-equiv="meta-H4" content="value-H4-C" />

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        await HeadElementHelper.SetTitleAsync("Fetch data");
        await HeadElementHelper.RemoveMetaElementsAsync(
            ByName("meta-N2"),
            ByProp("meta-P2"),
            ByHttpEquiv("meta-H2"));
        await HeadElementHelper.SetLinkElementsAsync(
            new LinkElement(rel: "alternate", href: "/en/fetchdata", hreflang: "en"),
            new LinkElement(rel: "alternate", href: "/fr/fetchdata", hreflang: "fr"),
            new LinkElement(rel: "stylesheet", href: "_content/SampleSite.Components/css/custom-C.css", media: "print", crossOrigin: "anonymous"),
            new LinkElement(rel: "canonical", href: "http://localhost/fetchdata", title: "link-C"),
            new LinkElement(rel: "preload", href: "_content/SampleSite.Components/css/purple.png", @as: "image", hreflang: "en"),
            new LinkElement(rel: "preload", href: "_content/SampleSite.Components/css/red.png", @as: "image", media: "(max-width: 599px)", imageSizes: "48px", imageSrcset: "red.png, 48px"));
        await HeadElementHelper.RemoveLinkElementsAsync(
            new LinkElement(rel: "alternate", href: "", hreflang: "ja"),
            new LinkElement(rel: "preload", href: "_content/SampleSite.Components/css/red.png", media: "(max-width: 600px)"),
            new LinkElement(rel: "icon", href: ""));

        forecasts = await WeatherForecastService.GetForecastAsync();
    }
}
